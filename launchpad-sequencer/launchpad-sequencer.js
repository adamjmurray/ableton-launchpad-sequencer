// Generated by CoffeeScript 1.3.3
/*
Original source files are at http://github.com/adamjmurray/m4l-launchpad-sequencer

Copyright (c) 2012, Adam Murray.
http://github.com/adamjmurray
http://compusition.com

All rights reserved.

Redistribution and use of this project in source and binary forms, with or
without modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the
   distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

var GUI, GUI_STEP_WIDTH, Launchpad, NOOP, PATTERNS, Pattern, ROW_LENGTH, STEPS, Sequencer, Storage, TRACKS, TRANSPORT_STOP, Track, bang, basePitch, clock, ctlin, endStep, grid, launchpad, load, log, notein, outlets, pattern, reset, save, sequencer, startStep, stepValue, storage, stringify, track,
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

TRANSPORT_STOP = 123;

NOOP = function() {};

TRACKS = 4;

PATTERNS = 8;

STEPS = 64;

ROW_LENGTH = 8;

GUI_STEP_WIDTH = 19;

outlets = 11;

stringify = function(obj) {
  var key, value;
  if (typeof obj === 'object') {
    if (obj instanceof Array) {
      return '[' + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          value = obj[_i];
          _results.push("" + (stringify(value)));
        }
        return _results;
      })()).join(',') + ']';
    } else {
      return '{' + ((function() {
        var _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key)) continue;
          value = obj[key];
          _results.push("" + key + ":" + (stringify(value)));
        }
        return _results;
      })()).join(', ') + '}';
    }
  } else {
    return obj.toString();
  }
};

log = function(msg) {
  return post(msg + '\n');
};

Launchpad = (function() {

  Launchpad.color = function(green, red) {
    if (((0 <= green && green <= 3)) && ((0 <= red && red <= 3))) {
      return 16 * green + red;
    }
  };

  Launchpad.OFF = Launchpad.color(0, 0);

  Launchpad.GREEN = Launchpad.color(3, 0);

  Launchpad.YELLOW = Launchpad.color(3, 2);

  Launchpad.ORANGE = Launchpad.color(2, 3);

  Launchpad.RED = Launchpad.color(0, 3);

  Launchpad.GRID_COLORS = [Launchpad.OFF, Launchpad.GREEN, Launchpad.YELLOW, Launchpad.ORANGE, Launchpad.RED];

  Launchpad.STEP_COLOR = Launchpad.color(1, 1);

  Launchpad.TRACK_COLOR = Launchpad.color(1, 2);

  Launchpad.PATTERN_COLOR = Launchpad.color(2, 0);

  function Launchpad() {
    this.noteout = NOOP;
    this.ctlout = NOOP;
    this.onTopDown = NOOP;
    this.onTopUp = NOOP;
    this.onRightDown = NOOP;
    this.onRightUp = NOOP;
    this.onGridDown = NOOP;
    this.onGridUp = NOOP;
  }

  Launchpad.prototype.ctlin = function(cc, value) {
    var index;
    index = cc - 104;
    if (value > 0) {
      return this.onTopDown(index);
    } else {
      return this.onTopUp(index);
    }
  };

  Launchpad.prototype.notein = function(pitch, velocity) {
    var x, y;
    x = pitch % 16;
    y = Math.floor(pitch / 16);
    if (x > 7) {
      if (velocity > 0) {
        return this.onRightDown(y);
      } else {
        return this.onRightUp(y);
      }
    } else {
      if (velocity > 0) {
        return this.onGridDown(x, y);
      } else {
        return this.onGridUp(x, y);
      }
    }
  };

  Launchpad.prototype._top = function(index, color) {
    if ((0 <= index && index <= 7)) {
      return this.ctlout(104 + index, color);
    }
  };

  Launchpad.prototype._grid = function(x, y, color) {
    if (((0 <= x && x <= 7)) && ((0 <= y && y <= 7))) {
      return this.noteout(16 * y + x, color);
    }
  };

  Launchpad.prototype._right = function(index, color) {
    if ((0 <= index && index <= 7)) {
      return this.noteout(16 * index + 8, color);
    }
  };

  Launchpad.prototype.allOff = function() {
    return this.ctlout(0, 0);
  };

  Launchpad.prototype.track = function(trackIndex) {
    return this._top(trackIndex, Launchpad.TRACK_COLOR);
  };

  Launchpad.prototype.trackOff = function(trackIndex) {
    return this._top(trackIndex, Launchpad.OFF);
  };

  Launchpad.prototype.stepValue = function(stepValue) {
    if (stepValue > 0) {
      return this._top(stepValue + 3, Launchpad.GRID_COLORS[stepValue]);
    }
  };

  Launchpad.prototype.stepValueOff = function(stepValue) {
    if (stepValue > 0) {
      return this._top(stepValue + 3, Launchpad.OFF);
    }
  };

  Launchpad.prototype.pattern = function(patternIndex) {
    return this._right(patternIndex, Launchpad.PATTERN_COLOR);
  };

  Launchpad.prototype.patternOff = function(patternIndex) {
    return this._right(patternIndex, Launchpad.OFF);
  };

  Launchpad.prototype.grid = function(x, y, value) {
    return this._grid(x, y, Launchpad.GRID_COLORS[value]);
  };

  Launchpad.prototype.activeStep = function(x, y) {
    return this._grid(x, y, Launchpad.STEP_COLOR);
  };

  return Launchpad;

})();

GUI = (function() {

  function GUI() {}

  GUI.GRID_COLORS = [[150, 150, 150], [0, 255, 0], [255, 255, 0], [255, 127, 0], [255, 0, 0], [80, 130, 200]];

  GUI.prototype.track = function(trackIndex) {
    return outlet(5, trackIndex);
  };

  GUI.prototype.stepValue = function(stepValue) {
    return outlet(6, stepValue);
  };

  GUI.prototype.pattern = function(patternIndex) {
    return outlet(7, patternIndex);
  };

  GUI.prototype.grid = function(x, y, value) {
    var left, top;
    left = x * GUI_STEP_WIDTH + 2;
    top = y * GUI_STEP_WIDTH + 2;
    outlet(8, 'frgb', GUI.GRID_COLORS[value]);
    return outlet(8, 'paintrect', left, top, left + 13, top + 13);
  };

  GUI.prototype.activeStep = function(x, y) {
    return this.grid(x, y, 5);
  };

  GUI.prototype.clearGrid = function() {
    return outlet(8, 'clear');
  };

  GUI.prototype.trackInfo = function(trackIndex, track) {
    var trackNumber;
    trackNumber = trackIndex + 1;
    return outlet(9, trackNumber, track.basePitch);
  };

  GUI.prototype.patternInfo = function(patternIndex, pattern) {
    return outlet(10, patternIndex + 1, pattern.type, pattern.start + 1, pattern.end + 1);
  };

  return GUI;

})();

Pattern = (function() {

  function Pattern(type, defaultValue) {
    var i;
    if (type == null) {
      type = '?';
    }
    this.defaultValue = defaultValue != null ? defaultValue : 0;
    this.sequence = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= STEPS ? _i < STEPS : _i > STEPS; i = 0 <= STEPS ? ++_i : --_i) {
        _results.push(this.defaultValue);
      }
      return _results;
    }).call(this);
    this.start = 0;
    this.end = STEPS - 1;
    this._updateLength();
    this.setType(type);
  }

  Pattern.prototype.setType = function(type) {
    this.type = type;
    return this._process = Pattern.processors[type] || NOOP;
  };

  Pattern.prototype.setStart = function(index) {
    if ((0 <= index && index < STEPS)) {
      this.start = parseInt(index);
      if (this.start > this.end) {
        this.end = this.start;
      }
      return this._updateLength();
    }
  };

  Pattern.prototype.setEnd = function(index) {
    if ((0 <= index && index < STEPS)) {
      this.end = parseInt(index);
      if (this.start > this.end) {
        this.start = this.end;
      }
      return this._updateLength();
    }
  };

  Pattern.prototype._updateLength = function() {
    return this.length = this.end - this.start + 1;
  };

  Pattern.prototype.getStep = function(index) {
    return this.sequence[index];
  };

  Pattern.prototype.setStep = function(index, value) {
    if ((0 <= index && index < STEPS)) {
      return this.sequence[index] = value;
    }
  };

  Pattern.prototype.stepIndexForClock = function(clock) {
    if (clock >= 0) {
      return (clock % this.length) + this.start;
    } else {
      return -1;
    }
  };

  Pattern.prototype.getStepForClock = function(clock) {
    return this.getStep(this.stepIndexForClock(clock));
  };

  Pattern.prototype.processNote = function(note, clock) {
    var value;
    value = this.getStepForClock(clock);
    if (value > 0) {
      this._process(note, value);
    }
    return note;
  };

  Pattern.processors = {
    gate: function(note, value) {
      return note.duration *= value;
    },
    pitch: function(note, value) {
      return note.pitch += value;
    },
    velocity: function(note, value) {
      return note.velocity *= 1 + 0.2 * value;
    },
    octave: function(note, value) {
      return note.pitch += (value <= 2 ? value * 12 : (value - 2) * -12);
    }
  };

  return Pattern;

})();

Track = (function() {

  function Track(basePitch, baseVelocity, baseDuration) {
    this.basePitch = basePitch != null ? basePitch : 60;
    this.baseVelocity = baseVelocity != null ? baseVelocity : 71;
    this.baseDuration = baseDuration != null ? baseDuration : 1.0;
    this.patterns = [new Pattern('gate'), new Pattern('pitch'), new Pattern('velocity'), new Pattern('octave'), new Pattern, new Pattern, new Pattern, new Pattern];
  }

  Track.prototype.noteForClock = function(clock) {
    var note, pattern, _i, _len, _ref;
    if (this.patterns[0].getStepForClock(clock) > 0) {
      note = {
        pitch: this.basePitch,
        velocity: this.baseVelocity,
        duration: this.baseDuration
      };
      _ref = this.patterns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pattern = _ref[_i];
        pattern.processNote(note, clock);
      }
      return note;
    } else {
      return null;
    }
  };

  return Track;

})();

Sequencer = (function() {

  function Sequencer(launchpad, gui) {
    this.launchpad = launchpad;
    this.gui = gui != null ? gui : new GUI;
    this.onNote = NOOP;
    this.reset(true);
  }

  Sequencer.prototype.reset = function(skipRedraw) {
    var track;
    this.track = 0;
    this.pattern = 0;
    this.value = 1;
    this.clock = -1;
    this.tracks = (function() {
      var _i, _results;
      _results = [];
      for (track = _i = 0; 0 <= TRACKS ? _i < TRACKS : _i > TRACKS; track = 0 <= TRACKS ? ++_i : --_i) {
        _results.push(new Track);
      }
      return _results;
    })();
    this._updateSelectedPattern(true);
    if (!skipRedraw) {
      return this.redraw();
    }
  };

  Sequencer.prototype.redraw = function() {
    this.launchpad.allOff();
    this.gui.clearGrid();
    this.selectValue(this.value, true);
    this.selectTrack(this.track, true);
    return this.selectPattern(this.pattern);
  };

  Sequencer.prototype.drawLaunchpad = function() {
    var pattern, step, value, x, y, _i, _results;
    this.launchpad.track(this.track);
    this.launchpad.stepValue(this.value);
    this.launchpad.pattern(this.pattern);
    pattern = this.selectedPattern;
    _results = [];
    for (x = _i = 0; 0 <= ROW_LENGTH ? _i < ROW_LENGTH : _i > ROW_LENGTH; x = 0 <= ROW_LENGTH ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= ROW_LENGTH ? _j < ROW_LENGTH : _j > ROW_LENGTH; y = 0 <= ROW_LENGTH ? ++_j : --_j) {
          step = x + y * ROW_LENGTH;
          value = pattern.getStep(step);
          _results1.push(this.launchpad.grid(x, y, value));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Sequencer.prototype.setGridValue = function(x, y) {
    var pattern, step, value;
    step = x + y * 8;
    pattern = this.selectedPattern;
    value = this.value;
    if (value === pattern.getStep(step)) {
      value = 0;
    }
    pattern.setStep(step, value);
    this.launchpad.grid(x, y, value);
    return this.gui.grid(x, y, value);
  };

  Sequencer.prototype.selectTrack = function(index, skipRedraw) {
    if (!((0 <= index && index <= 3))) {
      return;
    }
    this.launchpad.trackOff(this.track);
    this.track = index;
    this.launchpad.track(index);
    this.gui.track(index);
    return this._updateSelectedPattern(skipRedraw);
  };

  Sequencer.prototype.selectValue = function(value, preventToggle) {
    if (!((0 <= value && value <= 4))) {
      return;
    }
    this.launchpad.stepValueOff(this.value);
    if (this.value === value && !preventToggle) {
      value = 0;
    }
    this.value = value;
    this.launchpad.stepValue(value);
    return this.gui.stepValue(value);
  };

  Sequencer.prototype.selectPattern = function(index, skipRedraw) {
    if (!((0 <= index && index <= 7))) {
      return;
    }
    this.launchpad.patternOff(this.pattern);
    this.pattern = index;
    this.launchpad.pattern(index);
    this.gui.pattern(index);
    return this._updateSelectedPattern(skipRedraw);
  };

  Sequencer.prototype.setClock = function(clock) {
    var oldClock;
    oldClock = this.clock;
    if (oldClock !== clock) {
      this.clock = clock;
      this._drawActiveStep();
      return this._generateOutputForActiveStep();
    }
  };

  Sequencer.prototype.setPattern = function(t, p, stepValues) {
    if (!(((0 <= t && t < TRACKS)) && ((0 <= p && p < PATTERNS)) && (stepValues.length === 64))) {
      return;
    }
    this.tracks[t].patterns[p].sequence = stepValues;
    if (t === this.track && p === this.pattern) {
      return this._drawPattern(t, p);
    }
  };

  Sequencer.prototype._updateSelectedPattern = function(skipRedraw) {
    var patternIndex, trackIndex;
    trackIndex = this.track;
    patternIndex = this.pattern;
    this.selectedTrack = this.tracks[trackIndex];
    this.selectedPattern = this.selectedTrack.patterns[patternIndex];
    if (!skipRedraw) {
      return this._drawPattern(trackIndex, patternIndex);
    }
  };

  Sequencer.prototype._drawPattern = function(trackIndex, patternIndex) {
    var pattern, step, track, value, x, y, _i, _j;
    track = this.tracks[trackIndex];
    pattern = track != null ? track.patterns[patternIndex] : void 0;
    if (pattern == null) {
      return;
    }
    this.gui.trackInfo(trackIndex, track);
    this.gui.patternInfo(patternIndex, pattern);
    for (x = _i = 0; 0 <= ROW_LENGTH ? _i < ROW_LENGTH : _i > ROW_LENGTH; x = 0 <= ROW_LENGTH ? ++_i : --_i) {
      for (y = _j = 0; 0 <= ROW_LENGTH ? _j < ROW_LENGTH : _j > ROW_LENGTH; y = 0 <= ROW_LENGTH ? ++_j : --_j) {
        step = x + y * ROW_LENGTH;
        value = pattern.getStep(step);
        this.launchpad.grid(x, y, value);
        this.gui.grid(x, y, value);
      }
    }
    this.activeStep = -1;
    return this._drawActiveStep();
  };

  Sequencer.prototype._drawActiveStep = function() {
    var activeStep, oldActiveStep, oldValue, oldX, oldY, selectedPattern, x, y;
    selectedPattern = this.selectedPattern;
    oldActiveStep = this.activeStep;
    activeStep = selectedPattern.stepIndexForClock(this.clock);
    if (oldActiveStep >= 0) {
      oldX = oldActiveStep % 8;
      oldY = Math.floor(oldActiveStep / 8) % 8;
      oldValue = selectedPattern.getStep(oldActiveStep);
      this.launchpad.grid(oldX, oldY, oldValue);
      this.gui.grid(oldX, oldY, oldValue);
    }
    this.activeStep = activeStep;
    if (activeStep >= 0) {
      x = activeStep % 8;
      y = Math.floor(activeStep / 8) % 8;
      this.launchpad.activeStep(x, y);
      return this.gui.activeStep(x, y);
    }
  };

  Sequencer.prototype._generateOutputForActiveStep = function() {
    var clock, note, track, _i, _len, _ref, _results;
    clock = this.clock;
    if (clock >= 0) {
      _ref = this.tracks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        note = track.noteForClock(clock);
        if (note) {
          _results.push(outlet(2, note.pitch, note.velocity, note.duration * 50));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  return Sequencer;

})();

Storage = (function() {

  function Storage(sequencer) {
    this.sequencer = sequencer;
  }

  Storage.prototype.load = function() {
    var matches, path, pattern, patternIndex, property, sequencer, subpath, track, trackIndex, values;
    path = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    sequencer = this.sequencer;
    if (path === 'dump') {
      sequencer.redraw();
      return;
    }
    matches = /^track\.(\d+)::(.*)/.exec(path);
    if (matches == null) {
      return;
    }
    trackIndex = parseInt(matches[1]) - 1;
    subpath = matches[2];
    track = sequencer.tracks[trackIndex];
    if (track == null) {
      return;
    }
    if (subpath === 'basePitch') {
      return track.basePitch = parseInt(values[0]);
    } else {
      matches = /^pattern\.(\d+)::(.*)/.exec(subpath);
      if (matches == null) {
        return;
      }
      patternIndex = parseInt(matches[1]) - 1;
      property = matches[2];
      pattern = track.patterns[patternIndex];
      if (pattern == null) {
        return;
      }
      switch (property) {
        case 'ptype':
          return pattern.setType(values[0]);
        case 'start':
          return pattern.setStart(values[0]);
        case 'end':
          return pattern.setEnd(values[0]);
        case 'sequence':
          return sequencer.setPattern(trackIndex, patternIndex, values);
      }
    }
  };

  Storage.prototype.save = function() {
    var pattern, patternIndex, patterns, track, trackIndex, tracks, _i, _results;
    tracks = this.sequencer.tracks;
    _results = [];
    for (trackIndex = _i = 0; 0 <= TRACKS ? _i < TRACKS : _i > TRACKS; trackIndex = 0 <= TRACKS ? ++_i : --_i) {
      track = tracks[trackIndex];
      outlet(3, track.basePitch, trackIndex + 1);
      patterns = track.patterns;
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (patternIndex = _j = 0; 0 <= PATTERNS ? _j < PATTERNS : _j > PATTERNS; patternIndex = 0 <= PATTERNS ? ++_j : --_j) {
          pattern = patterns[patternIndex];
          _results1.push(outlet(4, pattern.type, pattern.start, pattern.end, pattern.sequence, patternIndex + 1, trackIndex + 1));
        }
        return _results1;
      })());
    }
    return _results;
  };

  return Storage;

})();

launchpad = new Launchpad;

launchpad.noteout = function(pitch, velocity) {
  return outlet(0, pitch, velocity);
};

launchpad.ctlout = function(cc, value) {
  return outlet(1, cc, value);
};

sequencer = new Sequencer(launchpad);

launchpad.onRightDown = function(idx) {
  return sequencer.selectPattern(idx);
};

launchpad.onGridDown = function(x, y) {
  return sequencer.setGridValue(x, y);
};

launchpad.onTopDown = function(idx) {
  if (idx <= 3) {
    return sequencer.selectTrack(idx);
  } else {
    return sequencer.selectValue(idx - 3);
  }
};

storage = new Storage(sequencer);

bang = function() {
  return sequencer.redraw();
};

reset = function() {
  return sequencer.reset();
};

notein = function(pitch, velocity) {
  return launchpad.notein(pitch, velocity);
};

ctlin = function(cc, val) {
  if (cc !== TRANSPORT_STOP) {
    return launchpad.ctlin(cc, val);
  } else {
    sequencer.setClock(-1);
    sequencer.drawLaunchpad();
    return save();
  }
};

clock = function(bars, beats, units) {
  var clockIndex;
  clockIndex = (bars - 1) * 16 + (beats - 1) * 4 + Math.round(units / 120);
  return sequencer.setClock(clockIndex);
};

track = function(trackIndex) {
  return sequencer.selectTrack(trackIndex);
};

stepValue = function(value) {
  return sequencer.selectValue(value);
};

pattern = function(patternIndex) {
  return sequencer.selectPattern(patternIndex);
};

grid = function(x, y) {
  return sequencer.setGridValue(x, y);
};

basePitch = function(pitch) {
  return sequencer.selectedTrack.basePitch = pitch;
};

startStep = function(stepNumber) {
  return sequencer.selectedPattern.setStart(stepNumber - 1);
};

endStep = function(stepNumber) {
  return sequencer.selectedPattern.setEnd(stepNumber - 1);
};

save = function() {
  return storage.save();
};

load = function() {
  var path, values;
  path = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return storage.load.apply(storage, [path].concat(__slice.call(values)));
};

log('reloaded at: ' + new Date);
